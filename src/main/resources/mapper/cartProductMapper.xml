<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cartProduct">

    <!-- 품절 상품 업데이트 -->
    <!-- JOIN ON 을 사용하는 것이 외부 조인시 누락 정보를 막아서 정확한 결과 도출, 권장하는 방식-->
    <update id="soldOut_yn" parameterType="Long">
        UPDATE tb_cart_product cp
            JOIN tb_product_inventory pi
        ON cp.prod_cd = pi.prod_cd
            SET cp.soldout_yn = IF((pi.curr_inv - pi.safe_inv) &lt;= 0, 'y', 'n')
        WHERE cp.cart_seq = #{cartSeq}
    </update>

    <!-- 일반 상품 수량 | 품절, 삭제 제외 -->
    <select id="count" resultType="int">
        select count(*)
        from tb_cart_product cp
        where cp.cart_seq = #{cartSeq}
          and del_yn &lt;&gt; 'y'
          and soldout_yn &lt;&gt; 'y'
    </select>

    <!-- 일반 상품 : 냉장/냉동/상온 map으로 저장 -->
    <!-- TODO  option 확실해지면 다시 작성 필요 - option_cd 존재시, option 값(opt_val)을 상품 명 옆에 두고 | 가격은 옵션 가격으로 지정 -->

    <!--냉장-->
    <select id="product_cold" resultType="CartProductDto">
        select cp.cart_prod_seq,
               cp.prod_cd,
               cp.typ,
               cp.soldout_yn,
               cp.qty,
               p.name,
               p.cnsmr_prc,
               p.sale_prc
        from tb_cart_product cp,
             tb_product p
        where cp.cart_seq = #{cartSeq}
          and cp.prod_cd = p.prod_cd
          and cp.typ = '냉장'
          and cp.del_yn &lt;&gt; 'y'
    </select>

    <!--냉동-->
    <select id="product_ice" resultType="CartProductDto">
        select cp.cart_prod_seq,
               cp.prod_cd,
               cp.typ,
               cp.soldout_yn,
               cp.qty,
               p.name,
               p.cnsmr_prc,
               p.sale_prc
        from tb_cart_product cp,
             tb_product p
        where cp.cart_seq = #{cartSeq}
          and cp.prod_cd = p.prod_cd
          and cp.typ = '냉동'
          and cp.del_yn &lt;&gt; 'y'
    </select>

    <!--상온-->
    <select id="product_outside" resultType="CartProductDto">
        select cp.cart_prod_seq,
               cp.prod_cd,
               cp.typ,
               cp.soldout_yn,
               cp.qty,
               p.name,
               p.cnsmr_prc,
               p.sale_prc
        from tb_cart_product cp,
             tb_product p
        where cp.cart_seq = #{cartSeq}
          and cp.prod_cd = p.prod_cd
          and cp.typ = '상온'
          and cp.del_yn &lt;&gt; 'y'
    </select>


    <!-- 주문하기에 선택된 장바구니 상품 가져오기 -->
    <!-- TODO 필요시 배열로 받아오는 방향으로 변경 -->

    <select id="selected_prod" resultType="CartProductDto">
        SELECT *
        from tb_cart_product cp,
        tb_product p
        -- tb_product_discount pd
        WHERE cp.cart_seq = #{cartSeq}
        and cp.prod_cd = p.prod_cd
        -- and p.dc_cd = pd.dc_cd
        AND cp.prod_cd IN
        <foreach item="item" collection="prodCdList" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <!-- 상품 삭제 -->
    <update id="delete" parameterType="java.util.Map">
        UPDATE tb_cart_product
        SET del_yn = 'y'
        WHERE prod_cd = #{prodCd}
          AND mbr_id = #{mbrId}
    </update>

    <!--  | 관리자 |  -->

    <!-- 장바구니에 존재하는 모든 상품 | 삭제 항목 제외 -->
    <select id="all_product" resultType="CartProductDto">
        select cp.prod_cd, cp.typ, cp.qty, p.name, p.cnsmr_prc, p.sale_prc
        from tb_cart_product cp,
             tb_product p
        where cp.cart_seq = #{cartSeq}
          and cp.prod_cd = p.prod_cd
          and cp.del_yn &lt;&gt; 'y'
    </select>

</mapper>