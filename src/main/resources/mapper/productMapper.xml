<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="tb_product">

    <!--product 관련 쿼리문: select_prod_cd, select_name, select_cate_cd_List, search_name-->

    <!--insert into tb_product (prod_cd, cate_cd, prod_stus, cust_cd, dc_cd, name, mng_prod_nm,
    sfkp_stus, sfkp_mtd, sp_prc, cnsmr_prc, sale_prc, mgn_rate, dscpt, detail, min_qty, weight,
    stnd, orplc, recipe, mtd, distb_tlmt, vld_start_dt, vld_end_dt, mng, fst_reg_dt, sub_yn,
    sale_yn, dp_yn, del_yn, inv_yn,opt_yn, rmk, in_dtm, in_id, up_dtm, up_id)  values ();-->



    <!-- 상품코드로 상품찾기 -->
    <select id="select_product_by_prod_cd" parameterType="Long" resultType="ProductDto">
        SELECT *
        FROM tb_product
        WHERE prod_cd = #{prod_cd} and sale_yn='y' and dp_yn='y' and del_yn='n'
    </select>

    <!-- 분류코드로 상품리스트 받기 (상품 객체 전체값) -->
    <select id="select_product_list_by_cate_cd" parameterType="String" resultType="ProductDto">
        SELECT *
        FROM tb_product
        WHERE cate_cd LIKE concat( #{cate_cd},'%') and sale_yn='y' and dp_yn='y' and del_yn='n'
    </select>

    <!--추가할 것. 재고테이블에서 재고가 있는 것만 ㅠ, 옵션여부도 판단하기-->

    <!-- 분류코드로 상품리스트 받기 , 전체 리스트에 출력되는 값만.-->
    <select id="select_product_list_cate_cd_mini" parameterType="String" resultType="ProductDto">
        SELECT prod_cd, name, sale_prc
        FROM tb_product
        WHERE cate_cd LIKE concat(#{cate_cd}, '%')  and sale_yn='y' and dp_yn='y' and del_yn='n'
    </select>


<!-- 컨트롤러는 흐름 서비스에서 준 결과로만, 서비스는 비즈니스 -->

    <!-- 분류코드로 상품리스트 받기 "코드_%" + 판매가격 낮은 순--> <!--하드코딩.. 이게 맞아? -->
    <select id="select_product_list_cate_cd__Cheap" parameterType="String" resultType="ProductDto">
        SELECT *
        FROM tb_product
        WHERE cate_cd LIKE concat(#{cate_cd}, '%')  and sale_yn='y' and dp_yn='y' and del_yn='n'
        ORDER By sale_prc
    </select>




    <!-- 이름으로 상품 검색하기 LIKE "%단어% -->
    <select id="search_by_name" parameterType="String" resultType="ProductDto">
        SELECT *
        FROM tb_product
        WHERE name LIKE concat( '%', #{name},'%') and sale_yn='y' and dp_yn='y' and del_yn='n'
    </select>

    <!--새 상품 추가하기-->
    <insert id="insert_product" parameterType="ProductDto" >
        INSERT INTO tb_product (cate_cd, prod_stus, cust_cd, dc_cd, name, mng_prod_nm, sfkp_stus, sfkp_mtd, sp_prc,
                                cnsmr_prc, sale_prc, mgn_rate, dscpt, detail, min_qty, weight, stnd, orplc, recipe,
                                mtd, distb_tlmt, vld_start_dt, vld_end_dt, mng, fst_reg_dt, sale_yn, dp_yn,
                                del_yn, inv_yn, opt_yn, rmk, in_dtm, in_id, up_dtm, up_id)
        VALUES (#{cate_cd}, #{prod_stus}, #{cust_cd}, #{dc_cd}, #{name}, #{mng_prod_nm}, #{sfkp_stus}, #{sfkp_mtd},
                #{sp_prc}, #{cnsmr_prc}, #{sale_prc}, #{mgn_rate}, #{dscpt}, #{detail}, #{min_qty}, #{weight},
                #{stnd}, #{orplc}, #{recipe}, #{mtd}, #{distb_tlmt}, #{vld_start_dt}, #{vld_end_dt}, #{mng},
                #{fst_reg_dt}, #{sale_yn}, #{dp_yn}, #{del_yn}, #{inv_yn}, #{opt_yn}, #{rmk}, #{in_dtm},
                #{in_id}, #{up_dtm}, #{up_id})
    </insert>

    <!-- 상품 정보 수정하기 -->
    <update id="update_product" parameterType="ProductDto" >
        INSERT INTO tb_product (cate_cd, prod_stus, cust_cd, dc_cd, name, mng_prod_nm, sfkp_stus, sfkp_mtd, sp_prc,
                                cnsmr_prc, sale_prc, mgn_rate, dscpt, detail, min_qty, weight, stnd, orplc, recipe,
                                mtd, distb_tlmt, vld_start_dt, vld_end_dt, mng, fst_reg_dt, sale_yn, dp_yn,
                                del_yn, inv_yn, opt_yn, rmk, in_dtm, in_id, up_dtm, up_id)
        VALUES (#{cate_cd}, #{prod_stus}, #{cust_cd}, #{dc_cd}, #{name}, #{mng_prod_nm}, #{sfkp_stus}, #{sfkp_mtd},
                #{sp_prc}, #{cnsmr_prc}, #{sale_prc}, #{mgn_rate}, #{dscpt}, #{detail}, #{min_qty}, #{weight},
                #{stnd}, #{orplc}, #{recipe}, #{mtd}, #{distb_tlmt}, #{vld_start_dt}, #{vld_end_dt}, #{mng},
                #{fst_reg_dt}, #{sale_yn}, #{dp_yn}, #{del_yn}, #{inv_yn}, #{opt_yn}, #{rmk}, #{up_dtm}, #{up_id})
    </update>

    <!-- 옵션 수정도 해야... 옵션 만들어야겠다 -->


    <!-- 상품코드 제일 큰것(구독) -->
    <select id="select_max_prod_cd" resultType="Long">
        SELECT Max(prod_cd)
        FROM tb_product
    </select>
    <!-- Max가 for문 하나라 더 좋다-->

    <!-- 임시로 쓰는 삭제문 -->
    <delete id="delete_for_TDD" parameterType="Long" >
        DELETE
        FROM tb_product
        WHERE prod_cd = #{prod_cd}
    </delete>

    <!-- DB적인 삭제문 -->
    <update id="delete_Product_del_y" parameterType="Long"  >
        UPDATE tb_product
        SET sale_yn='y' and dp_yn='y' and del_yn='y'
        WHERE prod_cd = #{prod_cd};
    </update>

    <!-- 카테고리별 개수 세기 -->
    <select id="count_cate_cd" resultType="Map">
        SELECT cate_cd, count(*)
        FROM tb_product
        WHERE sale_yn='y' and dp_yn='y' and del_yn='n'
        group by cate_cd
    </select>



<!--//필요한 값은 DB안에서 다 처리해서 나가기 (여러 함수나 SQL메서드를 사용해야 쎄보임!! 뭘좀 아는구나 ㅋㅋ good 구린건 안돼!! )-->

<!--면접관이 보는 부분: 맵퍼, 컨트롤러 처리, 얼마나 깔끔한지-->
<!--지원 회사 같은건 원장님께 조언얻기-->


</mapper>